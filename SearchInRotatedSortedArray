//Tutorial : https://www.youtube.com/watch?v=QdVrY3stDD4
//Note : Search needs to be done in O(log n) Only. Do not use Linear Search.

class Solution {
    public int search(int[] nums, int target) {
        if(nums == null || nums.length < 1){
            return -1;
        }
        
        int leftPointer = 0;
        int rightPointer = (nums.length - 1);
        int middle;
        
        while(leftPointer <= rightPointer){
            middle = (leftPointer + (rightPointer - leftPointer) / 2);
            
            if(nums[middle] == target){
                return middle;
            }else if(nums[middle] >= nums[leftPointer]){     //Sharp Left
                if(target >= nums[leftPointer] && target <= nums[middle]){
                    rightPointer = (middle - 1);
                }else{
                    leftPointer = (middle + 1);
                }
            }else{
                if(target >= nums[middle] && target <= nums[rightPointer]){
                    leftPointer = (middle + 1);
                }else{
                    rightPointer = (middle - 1);
                }
            }
        }
        
        return -1;
    }
    public static void main(String args[]){
      int array[] = {4,5,6,7,0,1,2};
      int numberToSearch = 0;
      
      search(array, numberToSearch);
    }  
}

//TC : O(log n)
//SC : O(1)
